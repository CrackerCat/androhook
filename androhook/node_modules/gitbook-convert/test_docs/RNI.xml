<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.0CR3//EN"
                     "../../../doc/docbook/docbookx.dtd"
[  <!ENTITY version "7.13.0">
   <!ENTITY pubmonth "_PUBMONTH_">
   <!ENTITY rni-es "RNI-Elasticsearch">]>
<article id="rni-es">
    <articleinfo>
                <mediaobject>
            <imageobject>
                <imagedata depth="1.0in" align="left" 
                    fileref="http://stylesheets.basistech.net/Logos/Basis-Technology.svg" format="SVG"/>
            </imageobject>
        </mediaobject>
     <mediaobject>
      <imageobject>
        <imagedata depth="0.5in" fileref="images/spacing.jpeg"/>
      </imageobject>      
     </mediaobject>

        <title>Rosette Name Indexer for Elasticsearch</title>
        <subtitle>RNI Elasticsearch Plugin</subtitle>
        <pubdate>&pubmonth;</pubdate>
        <releaseinfo>Version &version;</releaseinfo>
        <legalnotice>
            <informaltable condition="standalone" border="" frame="none" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <tbody>
                        <row>
                            <entry>Web:</entry>
                            <entry><ulink url="http://www.basistech.com">http://www.basistech.com</ulink></entry>
                        </row>
                        <row>
                            <entry>Support:</entry>
                            <entry><email>support@rosette.com</email></entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para>Copyright &copy; 2015 Basis Technology Corporation. All rights
                reserved. This document is property of and is proprietary to Basis
                Technology Corporation. It is not to be disclosed or reproduced in
                whole or in part without the express written consent of Basis Technology Corporation.</para>
            <para>The software product described in this document is
                copyright &copy; 2015 Basis Technology Corporation.</para>
            <para>Lexical data used in this product are, unless otherwise
                stated, copyright &copy; 2015 Basis Technology Corporation.</para>
            <para>Basis Technology is a registered trademark of Basis Technology
                Corporation. All other brand names may be trademarks of their respective owners.</para>
            <para>U.S. Government Rights. This software is commercial computer software owned by Basis Technology Corporation.   
                In accordance with DFARS 48 CFR 227-7202-1 and FAR 48 CFR 227.405-3(a), its use, reproduction, and disclosure by the Government 
                is subject to the terms of Basis Technology's standard software license agreement and as may be set forth in the applicable Government Contract.
                Copyright © 2015 Basis Technology Corporation. All rights reserved.
                Licensor/Contractor: Basis Technology Corporation, One Alewife Center, Cambridge, MA 02140, USA.</para>
        </legalnotice>
    </articleinfo>
    <section id="rni-es.intro">
        <title>Introduction</title>
        <para>&rni-es; is an Elasticsearch<footnote><para>Copyright &copy; 2015 by Elasticsearch BV. Licensed under The Apache License Version 2.0.</para></footnote> plugin for building fuzzy name retrieval and matching applications for persons, locations,
            and organizations. The plugin was built with Rosette Name Indexer 7.13.0 and tested with Elasticsearch 1.5.</para>
        <para>Supported languages with the ISO 639-3 codes that you use to identify the language are as follows:</para>
                <blockquote>
            <para>English (eng), French (fra), German (deu), Italian (ita), Portuguese (por), and Spanish (spa).</para>
        </blockquote>
    </section>
     <section id="rni-es.install">
        <title>Getting Started</title>
        <para>To use &rni-es;, you need the RNI &version; Elasticsearch plugin, an RLP License, and Elasticsearch.</para>
        <orderedlist>
            <listitem>
                <para>If you do not already have it, install Elasticsearch.</para>
                <para>Download and unzip <ulink url="https://www.elastic.co/downloads/elasticsearch">elasticsearch-1.x.y.zip</ulink>.</para>
            </listitem>
            <listitem>
                <para>Install the &rni-es; plugin.</para>
                <para>Navigate to the <literal>elasticsearch-1.x.y</literal> root directory and run</para>
                <programlisting>bin/plugin --install rni-es --url file:///path/to/rni-es-&version;.zip</programlisting>
                <para>The &rni-es; plugin is now in <literal>plugins/rni-es</literal>.</para>
            </listitem>
            <listitem>
                <para>Copy the RLP License (<filename>rlp-license.xml</filename>) to <filename>plugins/rni-es/bt_root/rlp/rlp/licenses</filename>.</para>
                <para>This license must be in place before you can use &rni-es;.</para>
            </listitem>
        </orderedlist>
        <para>To start the Elasticsearch server, run</para>
        <literallayout>bin/elasticsearch</literallayout>
    </section>
    <section id="rni-es.usage">
        <title>Usage Pattern</title>
        <orderedlist>
            <listitem><para>Create an index.</para></listitem>
            <listitem><para>Define a mapping for fields that will contain person, location, or organization names. The type for 
                each of these fields is <literal>"rni_name"</literal>.</para></listitem>
            <listitem><para>Create documents that contain one or more name fields along with other fields of interest. Each name
            field in a document will contain a name.</para></listitem>
            <listitem><para>Query the index.</para></listitem>
        </orderedlist>
        <para>The following snippets use the <ulink url="http:/curl.haxx.se/">cURL</ulink>
        command-line tool to illustrate the Elasticsearch API for running the &rni-es; plugin.</para>
    <section>
        <title>Creating an Index</title>
        <para>The following cURL statement creates an index named <literal>rni-test</literal>.</para>
        <literallayout>curl -XPUT 'http://localhost:9200/rni-test'</literallayout>
    </section>
    <section>
        <title>Define a Mapping</title>
        <para>Specify a document type for the documents you plan to create, and set the "type" for name fields to "rni_name".</para>
        <para>The following statement maps the "primary_name" and "aka" (also known as) fields in the "record" document to the "rni_name" 
            type in the "rni-test" index.</para>
        <literallayout>curl -XPUT 'http://localhost:9200/rni-test/record/_mapping' -d '{
    "record" : {
        "properties" : {
            "primary_name" : { "type" : "rni_name" },
            "aka" : { "type" : "rni_name" },
            "occupation" : { "type" : "string" }
        }
    }
}'</literallayout>
<para><emphasis>Optimization for single-valued "rni_name" fields: </emphasis>If, for example, you know that the "primary_name" field never contains more than a single value, you
can minimize overhhead by turning off the "rni-multivalued" property, which is <literal>true</literal> by default.</para>
        <literallayout>"primary_name" : { "type" : "rni_name", "rni_multivalued" : false }</literallayout>
    </section>
    <section>
        <title>Creating Documents</title>
        <para>You may include document fields other than name fields.</para>
        <literallayout>curl -XPUT 'http://localhost:9200/rni-test/record/1' -d '{
    "primary_name" : "Joe Schmoe",
    "aka" : "Bossman",
    "occupation" : "business owner"
}'</literallayout>
 <para>For the name fields, you can include individual properties in place of just a name string. Entity type is particularly useful.</para>
        <informaltable id="rni-es.nameprops">
            <tgroup cols="3">
              <colspec colnum="1" colwidth="35mm"/>
              <colspec colnum="2" colwidth="15mm"/>
                <thead>
                    <row>
                        <entry>Property</entry>
                        <entry>Required</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><literal>"data"</literal></entry>
                        <entry align="center">✓</entry>
                        <entry>The name string.</entry>
                    </row>
                    <row>
                        <entry><literal>"language"</literal></entry>
                        <entry></entry>
                        <entry>ISO 639-3 Code for the language of use: the language of the document in which the name was found.</entry>
                    </row>
                    <row>
                        <entry><literal>"languageOfOrigin"</literal></entry>
                        <entry></entry>
                        <entry>ISO 639-3 Code for the  language of origin of the name. For example, a name of Spanish origin (spa) may
                        be found in an English (eng) document.</entry>
                    </row>
                    <row>
                        <entry><literal>"script"</literal></entry>
                        <entry></entry>
                        <entry>ISO 15924 code for the script: the script for all languages supported in this release is "Latn".</entry>
                    </row>
                    <row>
                        <entry><literal>"entityType</literal></entry>
                        <entry></entry>
                        <entry>"PERSON", "LOCATION", or "ORGANIZATION".</entry>
                    </row>
                    <row>
                        <entry><literal>"uid"</literal></entry>
                        <entry></entry>
                        <entry>Unique string identifier for the document.</entry>
                    </row>
                </tbody>
            </tgroup>     
        </informaltable>
        <para>Example:</para>
        <literallayout>curl 'http://localhost:9200/rni-test/record/3' -d '{
    "primary_name" : {
        "data" : "Joe Schmoe", 
        "language" : "eng", 
        "script" : "Latn",
        "entityType" : "PERSON"
    }
}'</literallayout>
    </section>
    <section>
        <title>Query the Index</title>
        <para>The query for a name consists of two parts.</para>
        <section>
            <title>Base Query</title>
            <para>The base query is a standard query against a name field:</para>

<literallayout>    "query" : {
        "match" : {
            "primary_name" : "Jo Shmoe"
        }
    }</literallayout>

<para>Querying supports the same <link linkend="rni-es.nameprops">name properties</link> that you may use when indexing documents. Unlike during
document creation, you must wrap the name fields in a single JSON object.</para>

<literallayout>curl 'http://localhost:9200/rni-test/record/_search' -d '{
    "query" : {
        "match" : {
            "primary_name" : "{\"data\" : \"Jo Shmoe\", \"language\" : \"eng\", \"entityType\" : \"PERSON\"}"
        }
    }
}'</literallayout>

<para>Much like during indexing, RNI creates a set of keys based on the name and then generates a more complex internal 
query to match against the indexed keys.</para> 
            <formalpara>
                <title>Base Query Against a Multivalued Name Field</title>
                <para>If the name field you are querying contains multiple values, use a nested query. The following query assumes that the "name"
                field may contain multiple values:</para>
            </formalpara>
<literallayout>  "query" : {
    "nested" : {
      "path" : "name",
      "query" : {
        "match" : {
          "name" : "Joe Shmoe"
        }
      }
    }
  }</literallayout>
        </section>
    <section>
        <title>Rescoring with the RNI Pairwise Name Match</title>       
    <para>The second part of the query uses Elasticsearch 
        <ulink url="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-rescore.html">Rescoring</ulink>
        to ensure that only good candidates are passed to the RNI pairwise matcher, which is a computationally intensive process.</para>
        <para>Rescoring uses the following parameters:</para>
            <itemizedlist>
            <listitem>
                <para><literal>window_size</literal> (an integer, defaults to 10) specifies how many documents from the base query should be passed to the RNI pairwise matcher.</para>
                <para>Use this parameter to limit the number of compute-intensive name matches that need to be performed, thus decreasing query latency.</para>
            </listitem>
                <listitem>
                    <para><literal>query_weight</literal>  (a float, defaults to 1.0) specifies the weighting of the score returned by the base query.</para>
                    <para>In the context of RNI pairwise matching, the base query score has little meaning, so we suggest you set it to 0.0.</para>
                </listitem>
            <listitem>
                <para><literal>rescore_query_weight</literal> (a float, defaults to 1.0) specifies the weighting of the maximum RNI pairwise match score.</para>
                <para>If <literal>query_weight</literal> 0.0 and <literal>rescore_query_weight</literal> is 1.0, the score that is returned by rescoring is the 
                    <link linkend="rn-es.scoring">RNI pairwise match score</link>.</para>
            </listitem>
        </itemizedlist>
        <para>In the following example, pairwise matching is performed on the top 200 names returned by the base query.</para>


<literallayout>    "rescore" : {
        "window_size" : 200,
        "query" : {
            "rescore_query" : {
                "function_score" : {
                    "name_score" : {
                        "field" : "primary_name",
                        "query_name" : "Jo Shmoe"
                    }
                }
            }
        },
        "query_weight" : 0.0,
        "rescore_query_weight" : 1.0
    }</literallayout>

<para>The "name_score" function matches every name in the given field against the query name and returns the maximum score to the 
    rescorer.</para>

<para>The "name_score" function score query must be given at least one object that specifies:</para>
        <itemizedlist spacing="compact">
            <listitem> <para>field: the field of type "rni_name" to match against</para></listitem>
            <listitem><para>query: the query name</para></listitem>
        </itemizedlist>

<para>It also supports all of the <link linkend="rni-es.nameprops">name properties</link> mentioned previously.</para>
<para>This example illustrates the full query incorporating both match and rescore.</para>
<literallayout>curl 'http://localhost:9200/rni-test/record/_search' -d '{
    "query" : {
        "match" : {
            "primary_name" : "Joe Shmoe"
        }
    },
    "rescore" : {
        "window_size" : 200,
        "query" : {
            "rescore_query" : {
                "function_score" : {
                    "name_score" : {
                        "field" : "primary_name",
                        "query_name" : "Jo Shmoe"
                    }
                }
            }
        },
        "query_weight" : 0.0,
        "rescore_query_weight" : 1.0
    }
}'</literallayout>
      
   <para>This query returns an RNI score of 0.6832789 against "Joe Shmoe":</para>
        <literallayout>{
  "_index": "rni-test",
  "_type": "record",
  "_id": "1",
  "_score": 0.6832789,
  "_source": {
    "primary_name": "Joe Shmoe",
    "aka": "Bossman",
    "occupation": "business owner"
  }
}</literallayout>
    </section>
    </section>
    </section>
    <section id="rn-es.scoring">
        <title>Interpreting RNI Scores</title>
        <para>RNI scores range from 0 to 1. The higher the score, the greater the confidence that this a relevant match. 
     A score of 1.0 indicates that the query name string and result name string are identical (including all name properties),
      and scores less than 1.0 for similar names where the query name and index name vary with respect to one or more properties (such as language of origin) 
      and one or more of the following:</para>
 <informaltable frame="all">
    <tgroup cols="2">
      <colspec colnum="1" colwidth="40mm"/>
      <thead>
        <row>
          <entry align="center">Variation</entry>
          <entry align="center">Example(s)</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>Phonetic and/or spelling differences</entry>
          <entry><foreignphrase>Nayif Hawatmeh</foreignphrase> and <foreignphrase>Nayif Hawatma</foreignphrase></entry>
        </row>
        <row>
           <entry>Missing name components</entry>
          <entry><foreignphrase>Mohammad Salah</foreignphrase> and <foreignphrase>Mohammad Abd El-Hamid Salah</foreignphrase></entry>
        </row>
        <row>
          <entry>Rarity of a shared name component</entry>
          <entry>Two English names that contain <foreignphrase>Ditters</foreignphrase> are more likely to match than two
         names that contain <foreignphrase>Smith</foreignphrase></entry>
        </row>
        <row>
          <entry>Initials</entry>
          <entry><foreignphrase>John F. Kennedy</foreignphrase> and <foreignphrase>John Fitzgerald Kennedy</foreignphrase></entry>
        </row>
        <row>
          <entry>Nicknames</entry>
          <entry><foreignphrase>Bobby Holguin</foreignphrase> and <foreignphrase>Robert Holguin</foreignphrase></entry>
        </row>
        <row>
            <entry>"Cousin" or cognate names</entry>
              <entry><foreignphrase>Pedro Calzon</foreignphrase> and <foreignphrase>Peter Calzon</foreignphrase></entry>
          </row>
        <row>
          <entry>Uppercase/Lowercase</entry>
          <entry><foreignphrase>Rosa Elena PACHECO</foreignphrase> and <foreignphrase>Rosa Elena Pacheco</foreignphrase></entry>
        </row>
        <row>
          <entry>Reordered name components</entry>
          <entry><foreignphrase>Zedong Mao</foreignphrase> and <foreignphrase>Mao Zedong</foreignphrase></entry>
        </row>
        <row>
          <entry>Variable Segmentation</entry>
          <entry><foreignphrase>Henry Van Dick</foreignphrase> and <foreignphrase>Henry VanDick</foreignphrase></entry>
        </row>
        <row>
        <entry>Corresponding name fields</entry>
          <entry>For [Katherine][Anne][Cox], the similarity with [Katherine][Ann][Cox] is higher than the similarity
            with [Katherine Ann][Cox]</entry>
        </row>
        <row>
            <entry>Truncation of name elements</entry>
            <entry>For <foreignphrase>Sawyer</foreignphrase>, the similarity with <foreignphrase>Sawy</foreignphrase> is higher than the 
            similarity with <foreignphrase>Sawi</foreignphrase>.</entry>
        </row>

        </tbody>
    </tgroup>
  </informaltable>
       <para>Scoring is commutative: the scores for two given names are always the same, regardless of which name is in the index and which name is in the query.</para>
    </section>
         <section id="rni-user-defined">
     <title>User-Configurable Features</title>
       <para>The plugin includes UTF-8 text files in the <filename>bt_root/rlpnc/data/rnm/ref/override</filename> subdirectory that designate name elements 
         to strip during indexing and queries, sample full-name pairs with match scores, and token pairs to receive enhanced scores during queries. This directory 
         also contains sample files for performing these operations on designated entity types.</para>
       <para>You can modify these files and add additional files in the same subdirectory to extend coverage to additional supported languages. You can also create 
           files that only apply to a specified entity type, such as PERSON.</para>
         <formalpara>
             <title>RNI Tuning Properties</title>
             <para>RNI includes a number of properties that we can use to tune the matching algorithm that RNI uses. If you are interested in exploring this topic, 
                 please contact <email>support@rosette.com</email>.</para>
         </formalpara>
         <section id="rni-sdk-user-defined-stop-patterns">
            <title>Stop Patterns and Stopword Prefixes</title>
           <para>Stop patterns and stopword prefixes strip matching names elements during indexing and queries. The stripping of prefixes (string literals)
           can be performed more quickly than the application of stop patterns (regular expressions), so you can rely on stopword prefixes for the
           efficient removal of prefixes, such as titles, that you do not want to include in name matching.</para>
           <para>For each name, RNI first performs character-level normalization, stripping punctuation, with the exception of periods, commas, and hyphens; 
               whitespace is reduced to single spaces; and characters are lowercased. Then RNI cycles its way through the stop patterns then the stopwords, removing during each cycle the patterns 
               and stopwords that strip nothing, until the list of stop patterns and stopwords is empty.</para>
           <formalpara>
             <title>Stop Pattern</title>
             <para>A stop pattern is a regular expression that excludes matching name elements during indexing and queries. 
                     You can use any regular expression supported by the Java 1.7<literal> java.util.regex.Pattern</literal>.</para>
       </formalpara>           
       <para>Stop patterns for a given language are specified in a UTF-8 file with the ISO639 three-letter language code in the filename:</para>
     <para>stopregexes_<emphasis>LANG</emphasis>[_<emphasis>TYPE</emphasis>].txt <footnote id="rni-sdk-entity-overrides"><para>Include _<emphasis>TYPE</emphasis>, where <emphasis>TYPE</emphasis>
             designates an entity type, such as PERSON if you want the override to apply only if the name (for stop patterns), matching names, or matching tokens have been assigned this entity type.
             If the filename does not include _<emphasis>TYPE</emphasis>, it will be applied to all names, irregardless of the entity type.</para></footnote></para>
         <para>where <emphasis>LANG</emphasis> is the three-letter ISO 639-3 language code. Each row in the file, with the exception of rows that begin with 
             <literal>#</literal>,<footnote id="rkni-sdk.comments">
           <para><literal>#</literal> may also be used after an entry on the same line to begin a comment.</para></footnote>
           is a regular expression. Leading and trailing whitespace is removed from regex lines, so use <literal>\s</literal> at beginning and end where needed.</para>
         <para>Elements in the names to be processed that match any of these regular expressions are removed.  Longer stop patterns are applied before shorter stop patterns, so 
             the presence of a shorter stop pattern does not prevent the stripping of a longer pattern that includes the shorter pattern. For example, the 
             <literal>brigadier[- ]general</literal> stop pattern is applied where applicable when <literal>general</literal> is also a stop pattern.</para>
     <para>The plugin includes files with stop patterns for names in English (generic and ORGANIZATION) and Spanish (generic). These files are in 
       <filename>bt_root//rlpnc/data/rnm/ref/override</filename>. The generic (non-entity-specific) English file is <filename>stopregexes_eng.txt</filename>.
          For example, the entry <literallayout>^mayor\s</literallayout> indicates that <literal>mayor</literal> (1) at the beginning of a lowercased name, and (2) followed by whitespace is to be removed.</para>
       <para>You can modify the contents of this file. To add stop patterns for a different language, create an additional UTF-8 file in the same subdirectory with the three-letter language code in the filename. 
         For example, <filename>stopregexes_por.txt</filename> would include regular expressions with Portuguese names; <filename>stopregexes_eng_PERSON.txt</filename> would include regular expression to 
       remove elements from PERSON names in English text.</para>
     <para>Use of complex patterns may increase processing time. When possible, use stopword prefixes.</para>
             <formalpara>
              <title>Stopword Prefixes</title>
             <para>A stopword prefix is a string literal that strips the matching prefix from name elements during indexing and queries.</para>
            </formalpara>
             <para>Stopword prefixes for a given language are specified in a UTF-8 file with the ISO639 three-letter language code in the filename:</para>
             <para>stopprefixes_<emphasis>LANG</emphasis>[_<emphasis>TYPE</emphasis>].txt <footnoteref linkend="rni-sdk-entity-overrides"/>.</para>
           <para>where <emphasis>LANG</emphasis> is a three-letter language code. Each row in the file, with the exception of rows that begin with <literal>#</literal>,
               <footnoteref linkend="rkni-sdk.comments"/> is a string literal.</para>
             <para>Prefixes in the names to be processed that match any of these string literals are removed. </para>
             <para>Like stop patterns, longer stopword prefixes take precedence over shorter prefixes that the longer stopword contains. For example, the <literal>lieutenant colonel</literal>
             stopword prefix is applied where applicable when <literal>colonel</literal> is also a stopword prefix.</para>
             <para>The plugin includes files with generic stopword prefixes for names in English and Spanish. These files are in 
             <filename>bt_root//rlpnc/data/rnm/ref/override</filename>: <filename>stopprefixes_eng.txt</filename> and <filename>stopprefixes_spa.txt</filename>.
             You can modify the contents of these files. To add stopword prefixes for another language, create a UTF-8 file in the same directory with the three-letter language code in the filename.
             For example, <filename>stopprefixes_fra.txt</filename> would include stopword prefixes for use with French names.</para>
     </section>
     <section id="rni-sdk-user-defined-gray-list">
       <title>Overriding Name Pair Matches</title>
       <para>You can create UTF-8 text files that specify the scores to be assigned for specified full-name pairs.
       The filename uses ISO639 three-letter language codes to designate the language of each full name in each of the full-name pairs:</para>
       <para>fullnames_<emphasis>LANG1</emphasis>_<emphasis>LANG2</emphasis>[_<emphasis>TYPE</emphasis>].txt <footnoteref linkend="rni-sdk-entity-overrides"/></para>
       <para>where <emphasis>LANG1</emphasis> is the three-letter language code for the first name and <emphasis>LANG2</emphasis> is the three letter language code for the 
       second name. Each row in the file, with the exception of rows that begin with <literal>#</literal>, is a tab-delimited full-name pair and score:</para>
      <para><emphasis>query_name</emphasis> <keycap>Tab</keycap> <emphasis>index_name</emphasis> <keycap>Tab</keycap> <emphasis>score</emphasis></para>
       <para>The scores must between 0 and 1.0, where 0 indicates no match, and 1.0 indicates a perfect match.<footnote><para>Since the minimum score
         for names returned by RNI rescoring queries must be greater than 0, an RNI rescoring query will not return the name if the override score is 0.</para></footnote></para>
        <para>The plugin includes a sample file with sample entries commented out: <filename>bt_root//rlpnc/data/rnm/ref/override/fullnames_eng_eng.txt</filename>.
       Any non-commented-out entries in this file assign scores to English queries applied to English names in <literal>rni_name</literal> fields. For example,</para> 
       <literallayout>John Doe	Joe Bloggs	1.0</literallayout>
       <para> indicates that the query name <literal>John Doe</literal> matches the index name <literal>Joe Bloggs</literal>  (both used in different regions to indicate 'person unknown') with a score of 1.0.</para>
         <para>These match patterns are commutative. The previous entry also specifies a match score of 1.0 if the query name is <literal>Joe Bloggs</literal> and the index includes
         sa document with an <literal>rni_name</literal> field containing <literal>John Doe</literal>.</para>
         <para>You can add entries for English to English name matches to <filename>fullnames_eng_eng.txt</filename>, and create 
         additional override files, using the filename to specify the languages.</para>
     </section>
  </section>

</article>    